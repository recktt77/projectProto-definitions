// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: subscription.proto

package subscription

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Plan struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Features      []string               `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
	Price         float64                `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	DurationDays  int32                  `protobuf:"varint,5,opt,name=duration_days,json=durationDays,proto3" json:"duration_days,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Plan) Reset() {
	*x = Plan{}
	mi := &file_subscription_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{0}
}

func (x *Plan) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Plan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plan) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Plan) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Plan) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

type Subscription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlanId        string                 `protobuf:"bytes,3,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	StartDate     string                 `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       string                 `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Active        bool                   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_subscription_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{1}
}

func (x *Subscription) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subscription) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Subscription) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *Subscription) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Subscription) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *Subscription) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlanId        string                 `protobuf:"bytes,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_subscription_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{2}
}

func (x *SubscribeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubscribeRequest) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

type SubscribeResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_subscription_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeResponse) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *SubscribeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CancelSubscriptionRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CancelSubscriptionRequest) Reset() {
	*x = CancelSubscriptionRequest{}
	mi := &file_subscription_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSubscriptionRequest) ProtoMessage() {}

func (x *CancelSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*CancelSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{4}
}

func (x *CancelSubscriptionRequest) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

type CancelSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelSubscriptionResponse) Reset() {
	*x = CancelSubscriptionResponse{}
	mi := &file_subscription_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelSubscriptionResponse) ProtoMessage() {}

func (x *CancelSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*CancelSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{5}
}

func (x *CancelSubscriptionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetPlansRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlansRequest) Reset() {
	*x = GetPlansRequest{}
	mi := &file_subscription_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlansRequest) ProtoMessage() {}

func (x *GetPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlansRequest.ProtoReflect.Descriptor instead.
func (*GetPlansRequest) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{6}
}

type GetPlansResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Plans         []*Plan                `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlansResponse) Reset() {
	*x = GetPlansResponse{}
	mi := &file_subscription_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlansResponse) ProtoMessage() {}

func (x *GetPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlansResponse.ProtoReflect.Descriptor instead.
func (*GetPlansResponse) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{7}
}

func (x *GetPlansResponse) GetPlans() []*Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

type GetSubscriptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscriptions []*Subscription        `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubscriptionResponse) Reset() {
	*x = GetSubscriptionResponse{}
	mi := &file_subscription_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubscriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionResponse) ProtoMessage() {}

func (x *GetSubscriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionResponse) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{8}
}

func (x *GetSubscriptionResponse) GetSubscriptions() []*Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type GetSubscriptionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubscriptionStatusRequest) Reset() {
	*x = GetSubscriptionStatusRequest{}
	mi := &file_subscription_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubscriptionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionStatusRequest) ProtoMessage() {}

func (x *GetSubscriptionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionStatusRequest) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{9}
}

func (x *GetSubscriptionStatusRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetSubscriptionStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subscription  *Subscription          `protobuf:"bytes,1,opt,name=subscription,proto3" json:"subscription,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubscriptionStatusResponse) Reset() {
	*x = GetSubscriptionStatusResponse{}
	mi := &file_subscription_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubscriptionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionStatusResponse) ProtoMessage() {}

func (x *GetSubscriptionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionStatusResponse.ProtoReflect.Descriptor instead.
func (*GetSubscriptionStatusResponse) Descriptor() ([]byte, []int) {
	return file_subscription_proto_rawDescGZIP(), []int{10}
}

func (x *GetSubscriptionStatusResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

var File_subscription_proto protoreflect.FileDescriptor

const file_subscription_proto_rawDesc = "" +
	"\n" +
	"\x12subscription.proto\x12\fsubscription\"\x81\x01\n" +
	"\x04Plan\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bfeatures\x18\x03 \x03(\tR\bfeatures\x12\x14\n" +
	"\x05price\x18\x04 \x01(\x01R\x05price\x12#\n" +
	"\rduration_days\x18\x05 \x01(\x05R\fdurationDays\"\xa2\x01\n" +
	"\fSubscription\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x17\n" +
	"\aplan_id\x18\x03 \x01(\tR\x06planId\x12\x1d\n" +
	"\n" +
	"start_date\x18\x04 \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x05 \x01(\tR\aendDate\x12\x16\n" +
	"\x06active\x18\x06 \x01(\bR\x06active\"D\n" +
	"\x10SubscribeRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x17\n" +
	"\aplan_id\x18\x02 \x01(\tR\x06planId\"V\n" +
	"\x11SubscribeResponse\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\tR\x0esubscriptionId\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"D\n" +
	"\x19CancelSubscriptionRequest\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\tR\x0esubscriptionId\"6\n" +
	"\x1aCancelSubscriptionResponse\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"\x11\n" +
	"\x0fGetPlansRequest\"<\n" +
	"\x10GetPlansResponse\x12(\n" +
	"\x05plans\x18\x01 \x03(\v2\x12.subscription.PlanR\x05plans\"[\n" +
	"\x17GetSubscriptionResponse\x12@\n" +
	"\rsubscriptions\x18\x01 \x03(\v2\x1a.subscription.SubscriptionR\rsubscriptions\"7\n" +
	"\x1cGetSubscriptionStatusRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"_\n" +
	"\x1dGetSubscriptionStatusResponse\x12>\n" +
	"\fsubscription\x18\x01 \x01(\v2\x1a.subscription.SubscriptionR\fsubscription2\x8b\x03\n" +
	"\x13SubscriptionService\x12L\n" +
	"\tSubscribe\x12\x1e.subscription.SubscribeRequest\x1a\x1f.subscription.SubscribeResponse\x12g\n" +
	"\x12CancelSubscription\x12'.subscription.CancelSubscriptionRequest\x1a(.subscription.CancelSubscriptionResponse\x12K\n" +
	"\bGetPlans\x12\x1e.subscription.SubscribeRequest\x1a\x1f.subscription.SubscribeResponse\x12p\n" +
	"\x15GetSubscriptionStatus\x12*.subscription.GetSubscriptionStatusRequest\x1a+.subscription.GetSubscriptionStatusResponseB$Z\"auth_service/genproto/subscriptionb\x06proto3"

var (
	file_subscription_proto_rawDescOnce sync.Once
	file_subscription_proto_rawDescData []byte
)

func file_subscription_proto_rawDescGZIP() []byte {
	file_subscription_proto_rawDescOnce.Do(func() {
		file_subscription_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_subscription_proto_rawDesc), len(file_subscription_proto_rawDesc)))
	})
	return file_subscription_proto_rawDescData
}

var file_subscription_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_subscription_proto_goTypes = []any{
	(*Plan)(nil),                          // 0: subscription.Plan
	(*Subscription)(nil),                  // 1: subscription.Subscription
	(*SubscribeRequest)(nil),              // 2: subscription.SubscribeRequest
	(*SubscribeResponse)(nil),             // 3: subscription.SubscribeResponse
	(*CancelSubscriptionRequest)(nil),     // 4: subscription.CancelSubscriptionRequest
	(*CancelSubscriptionResponse)(nil),    // 5: subscription.CancelSubscriptionResponse
	(*GetPlansRequest)(nil),               // 6: subscription.GetPlansRequest
	(*GetPlansResponse)(nil),              // 7: subscription.GetPlansResponse
	(*GetSubscriptionResponse)(nil),       // 8: subscription.GetSubscriptionResponse
	(*GetSubscriptionStatusRequest)(nil),  // 9: subscription.GetSubscriptionStatusRequest
	(*GetSubscriptionStatusResponse)(nil), // 10: subscription.GetSubscriptionStatusResponse
}
var file_subscription_proto_depIdxs = []int32{
	0,  // 0: subscription.GetPlansResponse.plans:type_name -> subscription.Plan
	1,  // 1: subscription.GetSubscriptionResponse.subscriptions:type_name -> subscription.Subscription
	1,  // 2: subscription.GetSubscriptionStatusResponse.subscription:type_name -> subscription.Subscription
	2,  // 3: subscription.SubscriptionService.Subscribe:input_type -> subscription.SubscribeRequest
	4,  // 4: subscription.SubscriptionService.CancelSubscription:input_type -> subscription.CancelSubscriptionRequest
	2,  // 5: subscription.SubscriptionService.GetPlans:input_type -> subscription.SubscribeRequest
	9,  // 6: subscription.SubscriptionService.GetSubscriptionStatus:input_type -> subscription.GetSubscriptionStatusRequest
	3,  // 7: subscription.SubscriptionService.Subscribe:output_type -> subscription.SubscribeResponse
	5,  // 8: subscription.SubscriptionService.CancelSubscription:output_type -> subscription.CancelSubscriptionResponse
	3,  // 9: subscription.SubscriptionService.GetPlans:output_type -> subscription.SubscribeResponse
	10, // 10: subscription.SubscriptionService.GetSubscriptionStatus:output_type -> subscription.GetSubscriptionStatusResponse
	7,  // [7:11] is the sub-list for method output_type
	3,  // [3:7] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_subscription_proto_init() }
func file_subscription_proto_init() {
	if File_subscription_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_subscription_proto_rawDesc), len(file_subscription_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_subscription_proto_goTypes,
		DependencyIndexes: file_subscription_proto_depIdxs,
		MessageInfos:      file_subscription_proto_msgTypes,
	}.Build()
	File_subscription_proto = out.File
	file_subscription_proto_goTypes = nil
	file_subscription_proto_depIdxs = nil
}
