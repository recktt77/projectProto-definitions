// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: subscription_event.proto

package subscription

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscriptionEventType int32

const (
	SubscriptionEventType_UNKNOWN    SubscriptionEventType = 0
	SubscriptionEventType_SUBSCRIBED SubscriptionEventType = 1
	SubscriptionEventType_CANCELLED  SubscriptionEventType = 2
)

// Enum value maps for SubscriptionEventType.
var (
	SubscriptionEventType_name = map[int32]string{
		0: "UNKNOWN",
		1: "SUBSCRIBED",
		2: "CANCELLED",
	}
	SubscriptionEventType_value = map[string]int32{
		"UNKNOWN":    0,
		"SUBSCRIBED": 1,
		"CANCELLED":  2,
	}
)

func (x SubscriptionEventType) Enum() *SubscriptionEventType {
	p := new(SubscriptionEventType)
	*p = x
	return p
}

func (x SubscriptionEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_subscription_event_proto_enumTypes[0].Descriptor()
}

func (SubscriptionEventType) Type() protoreflect.EnumType {
	return &file_subscription_event_proto_enumTypes[0]
}

func (x SubscriptionEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionEventType.Descriptor instead.
func (SubscriptionEventType) EnumDescriptor() ([]byte, []int) {
	return file_subscription_event_proto_rawDescGZIP(), []int{0}
}

type SubscriptionEvent struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SubscriptionId string                 `protobuf:"bytes,1,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PlanId         string                 `protobuf:"bytes,3,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	StartDate      string                 `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate        string                 `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Active         bool                   `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	EventType      SubscriptionEventType  `protobuf:"varint,7,opt,name=event_type,json=eventType,proto3,enum=subscription.SubscriptionEventType" json:"event_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubscriptionEvent) Reset() {
	*x = SubscriptionEvent{}
	mi := &file_subscription_event_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionEvent) ProtoMessage() {}

func (x *SubscriptionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_subscription_event_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionEvent.ProtoReflect.Descriptor instead.
func (*SubscriptionEvent) Descriptor() ([]byte, []int) {
	return file_subscription_event_proto_rawDescGZIP(), []int{0}
}

func (x *SubscriptionEvent) GetSubscriptionId() string {
	if x != nil {
		return x.SubscriptionId
	}
	return ""
}

func (x *SubscriptionEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubscriptionEvent) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *SubscriptionEvent) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SubscriptionEvent) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SubscriptionEvent) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *SubscriptionEvent) GetEventType() SubscriptionEventType {
	if x != nil {
		return x.EventType
	}
	return SubscriptionEventType_UNKNOWN
}

var File_subscription_event_proto protoreflect.FileDescriptor

const file_subscription_event_proto_rawDesc = "" +
	"\n" +
	"\x18subscription_event.proto\x12\fsubscription\"\x84\x02\n" +
	"\x11SubscriptionEvent\x12'\n" +
	"\x0fsubscription_id\x18\x01 \x01(\tR\x0esubscriptionId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12\x17\n" +
	"\aplan_id\x18\x03 \x01(\tR\x06planId\x12\x1d\n" +
	"\n" +
	"start_date\x18\x04 \x01(\tR\tstartDate\x12\x19\n" +
	"\bend_date\x18\x05 \x01(\tR\aendDate\x12\x16\n" +
	"\x06active\x18\x06 \x01(\bR\x06active\x12B\n" +
	"\n" +
	"event_type\x18\a \x01(\x0e2#.subscription.SubscriptionEventTypeR\teventType*C\n" +
	"\x15SubscriptionEventType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x0e\n" +
	"\n" +
	"SUBSCRIBED\x10\x01\x12\r\n" +
	"\tCANCELLED\x10\x02B$Z\"auth_service/genproto/subscriptionb\x06proto3"

var (
	file_subscription_event_proto_rawDescOnce sync.Once
	file_subscription_event_proto_rawDescData []byte
)

func file_subscription_event_proto_rawDescGZIP() []byte {
	file_subscription_event_proto_rawDescOnce.Do(func() {
		file_subscription_event_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_subscription_event_proto_rawDesc), len(file_subscription_event_proto_rawDesc)))
	})
	return file_subscription_event_proto_rawDescData
}

var file_subscription_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_subscription_event_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_subscription_event_proto_goTypes = []any{
	(SubscriptionEventType)(0), // 0: subscription.SubscriptionEventType
	(*SubscriptionEvent)(nil),  // 1: subscription.SubscriptionEvent
}
var file_subscription_event_proto_depIdxs = []int32{
	0, // 0: subscription.SubscriptionEvent.event_type:type_name -> subscription.SubscriptionEventType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_subscription_event_proto_init() }
func file_subscription_event_proto_init() {
	if File_subscription_event_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_subscription_event_proto_rawDesc), len(file_subscription_event_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_subscription_event_proto_goTypes,
		DependencyIndexes: file_subscription_event_proto_depIdxs,
		EnumInfos:         file_subscription_event_proto_enumTypes,
		MessageInfos:      file_subscription_event_proto_msgTypes,
	}.Build()
	File_subscription_event_proto = out.File
	file_subscription_event_proto_goTypes = nil
	file_subscription_event_proto_depIdxs = nil
}
